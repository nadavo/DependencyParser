from global_consts import basic_tagged_comp_file, advanced_tagged_comp_file, DELIMITER, EMPTY, ENDOFSENTENCE, all_file, comp_file, train_file
from DependencyDataReader import UnlabeledDataReader, DependencyDataReader
from utils import Timer
from FeaturesFactory import FullBasicFeatures, AdvancedFeatures
from DependencyParser import DependencyParser


def compDataWriter(sentences, predictions, output_file):
    """function to write tagged competition file according to model predictions"""
    assert sentences.keys() == predictions.keys(), "Missing predictions for sentences!"
    lines = list()
    for sentence_id in sentences.keys():
        sentence = sentences.get(sentence_id)
        heads = predictions.get(sentence_id)
        assert sentence.keys() == heads.keys(), "Missing head predictions for words!"
        for word_id in sentence.keys():
            word, pos = sentence.get(word_id)
            head = heads.get(word_id)
            line_list = [str(word_id), word, EMPTY, pos, EMPTY, EMPTY, str(head), EMPTY, EMPTY, EMPTY]
            line = DELIMITER.join(line_list) + ENDOFSENTENCE
            lines.append(line)
        lines.append(ENDOFSENTENCE)
    # assert len(lines) == len(sentences), "Missing tagged word!"
    with open(output_file, 'w') as file:
        file.write("".join(lines))


def generateCompTagging(comp_file, model):
    """function to generate tagging predictions for competition file, write and validate result file"""
    if model.feature_factory.type == "basic":
        output_file = basic_tagged_comp_file
    elif model.feature_factory.type == "advanced":
        output_file = advanced_tagged_comp_file
    data = UnlabeledDataReader(comp_file)
    model.predict(data)
    predictions = model.predictions.get(comp_file)
    compDataWriter(data.get_sentences(), predictions, output_file)
    validateTaggedCompFile(comp_file, output_file)


def validateTaggedCompFile(comp_file, tagged_comp_file):
    """function to validate the tagged competition file generated by model,
     is identical to original competition file when removing tags"""
    with open(comp_file, 'r') as unlabeled_data:
        unlabeled_lines = unlabeled_data.readlines()
    with open(tagged_comp_file, 'r') as labeled_data:
        labeled_lines = labeled_data.readlines()
    assert len(unlabeled_lines) == len(labeled_lines), "Missing Line!"
    mistakes = 0
    for i in range(len(unlabeled_lines)):
        labeled_line = labeled_lines[i].rstrip().split(DELIMITER)
        unlabeled_line = unlabeled_lines[i].rstrip().split(DELIMITER)
        if labeled_line[0] == '' and unlabeled_line[0] == '':
            continue
        assert len(labeled_line) == len(labeled_line), "Missing Column in line {}".format(i)
        assert labeled_line[6] != EMPTY, "Missing head prediction in line {}".format(i)
        labeled_line[6] = EMPTY
        if unlabeled_line != labeled_line:
            mistakes += 1
            print("Line differs:", unlabeled_line, labeled_line)
    if mistakes == 0:
        print("File is valid!")
    else:
        print("File is NOT valid!")


def generateCompFiles(model_type, num_iterations, features_cutoff):
    if model_type == "basic":
        print("Generating Basic Model Competition Predictions")
        data = DependencyDataReader(train_file)
        basic_features = FullBasicFeatures(data, features_cutoff)
        basic_features.initialize_vector()
        basic_model = DependencyParser(basic_features, num_iterations)
        generateCompTagging(comp_file, basic_model)
    elif model_type == "advanced":
        print("Generating Advanced Model Competition Predictions")
        data = DependencyDataReader(all_file)
        advanced_features = AdvancedFeatures(data, features_cutoff)
        advanced_features.initialize_vector()
        advanced_model = DependencyParser(advanced_features, num_iterations)
        generateCompTagging(comp_file, advanced_model)


def main():
    global_timer = Timer("Competition Files Generation")
    generateCompFiles("basic", 20, 0)
    for num_iter, cutoff in ((20, 0), (40, 0), (40, 1), (20, 1)):
        try:
            generateCompFiles("advanced", num_iter, cutoff)
        except FileNotFoundError:
            continue
        break
    global_timer.stop()


if __name__ == '__main__':
    main()
